データベースの説明
主キーと外部キーが存在する。

データベース主に３つのスキーマが分かれている。
それぞれ、ATMを例にして考えてみよう。
外部スキーマ：ユーザーがATMを見てる画面
概念スキーマ：開発者が見ているデータ
内部スキーマ：ハードウェアの部分

主要なデータベースの関係モデル：表形式
属性とは列のこと。

データベースの正規化
主キーと外部キーがある。
    →１つに特定するための列を主キー
外部キー
    →表と表をくっつけるためのキー
表を分けるメリット：
独立性が高まり、データの管理が容易になる。

第一正規化：重複してる列を分割する。
第二正規化：カテゴリー別にデータを分割する。
第三正規化：第二で分割しきれなかった部分をさらに分割する。

トランズアクション処理：

Atomicity:「完全に処理」、「全く処理されてないこと」「途中で終わる処理はつくらない」
Consistency：データベースの内容に矛盾がないこと。
Isolation：複数のトランズアクションの実行結果が等しくなること。
Duration:障害が発生してもデータベースからデータが消失しないこと。

共有ロック：他ユーザーはデータを見ることができるが更新は出来ない。
専有ロック：他ユーザーはデータを見ることができないが更新は出来ない。

ストアドプロシージャ：
プロシージャ：データベーすの命令郡を一つにまとめる。なぜ？データベースをSQLで実行するときに一つずつ実行する手間と通信にかかる負荷を軽減できる。

データベースの復元：
更新前ジャーナルと更新後ジャーナルがある。
更新前ジャーナル：処理が終わる前のデータをそれに保存
更新後ジャーナル：処理が無事に終わったら、それに記録。

コミットとロールバック：
![Screenshot 2024-05-11 at 10.31.37.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3779552/00c9f7e0-2078-c62c-9c14-7b048aac46ec.png)
![Screenshot 2024-05-11 at 10.31.57.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3779552/82e47a94-4ea6-44ad-6777-b90bd1e37ea3.png)
![Screenshot 2024-05-11 at 10.33.01.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3779552/71a2fcb5-87c1-9ae4-0ca0-b158ddd58506.png)
バックアップファイルと更新後ジャーナルでデータを破損した際に、データを復元できる。
バックアップファイルに定期的にデータが保存されている。更新後ジャーナルはトランズアクションが終わったあとのデータを保存してるので復元が可能。

ロールバック：トランズアクション中にエラーが発生した際、更新前ジャーナルで復元。
ロールフォワード：システム障害等でデータが破損した際、バックアプファイルと更新後ジャーナルで復元。![Screenshot 2024-05-11 at 10.36.30.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3779552/e0c9f425-6f75-45c0-a97a-b3bf1ec2dc95.png)

２相コミット
すべてコミット可能：コミット実施
一つでも✗：ロールバック
これらを２相コミットという。
